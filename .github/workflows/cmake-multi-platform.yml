# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Cmake test

on:
  push:
    branches: [ "main" ,"dev"]
  pull_request:
    branches: [ "main" ]
env:
  ROOT_VERSION: "6.32.08"
  GLS_VERSION: "2.5"
  

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]

    steps:
    - name: Install ROOT
      shell: bash
      run: |
       sudo apt-get update
       sudo apt-get install dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev python3 libssl-dev \
       gcc pkg-config libwayland-dev libx11-dev libx11-xcb-dev libxkbcommon-x11-dev libgles2-mesa-dev \
        libegl1-mesa-dev libffi-dev libxcursor-dev libvulkan-dev xvfb xdotool libgsl-dev \
        libvdt-dev libgif-dev libtbb-dev clang-format
       wget --quiet https://root.cern/download/root_v6.34.02.Linux-ubuntu24.10-x86_64-gcc14.2.tar.gz
       tar zxf root_v6.34.02.Linux-ubuntu24.10-x86_64-gcc14.2.tar.gz --directory /opt
       source /opt/root/bin/thisroot.sh
       echo $ROOTSYS
       export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH
       root-config --features
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Format check
      run: |
          find . -name "*.cpp" -o -name "*.h" -o -name "*.cxx" | xargs clang-format -style=file -output-replacements-xml | grep -q "<replacement " && echo "Clang-format check failed" && exit 1 || echo "Clang-format check passed"
    - name: Build
      shell: bash
      run: |
        source /opt/root/bin/thisroot.sh
        echo $ROOTSYS
        export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH
        CXXFLAGS=$(root-config --cflags)
        CPP_STANDARD=$(echo $CXXFLAGS | grep -o -E '\-std=c\+\+[^ ]+' | sed 's/-std=c++//')
        mkdir build
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=../inst -DEXAMPLES=ON -DCMAKE_CXX_STANDARD="$CPP_STANDARD"
        make 
        make install
    - name: Test
   #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        echo "test"
