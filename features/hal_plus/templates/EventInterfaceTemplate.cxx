/*
 *Generated by hal-cmake
 */
#include "EventInterfaceTemplate.h"

#include <Hal/DataManager.h>

namespace MyHal {

  EventInterfaceTemplate::EventInterfaceTemplate() : fEvent(nullptr), fCanDelete(kFALSE) {}

  void EventInterfaceTemplate::ConnectToTreeInternal(eMode mode) {
    Hal::DataManager* manager = Hal::DataManager::Instance();

    switch (mode) {
      case Hal::EventInterface::eMode::kRead: {
        fEvent = manager->GetObject("ObjectName");
      } break;
      case Hal::EventInterface::eMode::kWrite: {
        auto event = new TObject();
        fEvent     = new ObjectDoublePointer(event, false);

        manager->Register("ObjectName.", "obj", (TNamed*) fEvent->GetDoublePointer(), kTRUE);
      } break;
      case Hal::EventInterface::eMode::kWriteVirtual: {
        auto event = new TObject();
        fEvent     = new ObjectDoublePointer(event, false);
        manager->Register("ObjectName.", "obj", (TNamed*) fEvent->GetDoublePointer(), kTRUE);
        fCanDelete = kTRUE;
      } break;
    }
  }

  EventInterfaceTemplate::~EventInterfaceTemplate() {
    if (fEvent && fCanDelete) delete fEvent;
  }

}  // namespace MyHal
